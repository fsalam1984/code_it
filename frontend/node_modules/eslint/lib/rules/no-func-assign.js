/**
 * @fileoverview Rule to flag use of function declaration identifiers as variables.
 * @author Ian Christian Myers
 */

"use strict";

<<<<<<< HEAD
const astUtils = require("./utils/ast-utils");
=======
const astUtils = require("../util/ast-utils");
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

<<<<<<< HEAD
/** @type {import('../shared/types').Rule} */
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
module.exports = {
    meta: {
        type: "problem",

        docs: {
<<<<<<< HEAD
            description: "Disallow reassigning `function` declarations",
            recommended: true,
            url: "https://eslint.org/docs/latest/rules/no-func-assign"
        },

        schema: [],

        messages: {
            isAFunction: "'{{name}}' is a function."
        }
=======
            description: "disallow reassigning `function` declarations",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-func-assign"
        },

        schema: []
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
    },

    create(context) {

<<<<<<< HEAD
        const sourceCode = context.sourceCode;

        /**
         * Reports a reference if is non initializer and writable.
         * @param {References} references Collection of reference to check.
=======
        /**
         * Reports a reference if is non initializer and writable.
         * @param {References} references - Collection of reference to check.
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
         * @returns {void}
         */
        function checkReference(references) {
            astUtils.getModifyingReferences(references).forEach(reference => {
<<<<<<< HEAD
                context.report({
                    node: reference.identifier,
                    messageId: "isAFunction",
                    data: {
                        name: reference.identifier.name
                    }
                });
=======
                context.report({ node: reference.identifier, message: "'{{name}}' is a function.", data: { name: reference.identifier.name } });
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
            });
        }

        /**
         * Finds and reports references that are non initializer and writable.
<<<<<<< HEAD
         * @param {Variable} variable A variable to check.
=======
         * @param {Variable} variable - A variable to check.
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
         * @returns {void}
         */
        function checkVariable(variable) {
            if (variable.defs[0].type === "FunctionName") {
                checkReference(variable.references);
            }
        }

        /**
         * Checks parameters of a given function node.
<<<<<<< HEAD
         * @param {ASTNode} node A function node to check.
         * @returns {void}
         */
        function checkForFunction(node) {
            sourceCode.getDeclaredVariables(node).forEach(checkVariable);
=======
         * @param {ASTNode} node - A function node to check.
         * @returns {void}
         */
        function checkForFunction(node) {
            context.getDeclaredVariables(node).forEach(checkVariable);
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        }

        return {
            FunctionDeclaration: checkForFunction,
            FunctionExpression: checkForFunction
        };
    }
};
