/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Florent Cailhol @ooflorent
*/
<<<<<<< HEAD

"use strict";

const ConstDependency = require("./ConstDependency");
const HarmonyExports = require("./HarmonyExports");

/** @typedef {import("../Dependency").DependencyLocation} DependencyLocation */
/** @typedef {import("../javascript/JavascriptParser")} JavascriptParser */
/** @typedef {import("../javascript/JavascriptParser").Range} Range */

class HarmonyTopLevelThisParserPlugin {
	/**
	 * @param {JavascriptParser} parser the parser
	 * @returns {void}
	 */
=======
"use strict";

const ConstDependency = require("./ConstDependency");

class HarmonyTopLevelThisParserPlugin {
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
	apply(parser) {
		parser.hooks.expression
			.for("this")
			.tap("HarmonyTopLevelThisParserPlugin", node => {
				if (!parser.scope.topLevelScope) return;
<<<<<<< HEAD
				if (HarmonyExports.isEnabled(parser.state)) {
					const dep = new ConstDependency(
						"undefined",
						/** @type {Range} */ (node.range),
						null
					);
					dep.loc = /** @type {DependencyLocation} */ (node.loc);
					parser.state.module.addPresentationalDependency(dep);
					return true;
=======
				const module = parser.state.module;
				const isHarmony = !!(module.buildMeta && module.buildMeta.exportsType);
				if (isHarmony) {
					const dep = new ConstDependency("undefined", node.range, false);
					dep.loc = node.loc;
					parser.state.current.addDependency(dep);
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
				}
			});
	}
}

module.exports = HarmonyTopLevelThisParserPlugin;
