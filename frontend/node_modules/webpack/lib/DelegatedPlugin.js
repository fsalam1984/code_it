/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const DelegatedModuleFactoryPlugin = require("./DelegatedModuleFactoryPlugin");
const DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");
<<<<<<< HEAD

/** @typedef {import("./Compiler")} Compiler */
=======
const DelegatedExportsDependency = require("./dependencies/DelegatedExportsDependency");
const NullFactory = require("./NullFactory");
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

class DelegatedPlugin {
	constructor(options) {
		this.options = options;
	}

<<<<<<< HEAD
	/**
	 * Apply the plugin
	 * @param {Compiler} compiler the compiler instance
	 * @returns {void}
	 */
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
	apply(compiler) {
		compiler.hooks.compilation.tap(
			"DelegatedPlugin",
			(compilation, { normalModuleFactory }) => {
				compilation.dependencyFactories.set(
					DelegatedSourceDependency,
					normalModuleFactory
				);
<<<<<<< HEAD
=======
				compilation.dependencyFactories.set(
					DelegatedExportsDependency,
					new NullFactory()
				);
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
			}
		);

		compiler.hooks.compile.tap("DelegatedPlugin", ({ normalModuleFactory }) => {
<<<<<<< HEAD
			new DelegatedModuleFactoryPlugin({
				associatedObjectForCache: compiler.root,
				...this.options
			}).apply(normalModuleFactory);
=======
			new DelegatedModuleFactoryPlugin(this.options).apply(normalModuleFactory);
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
		});
	}
}

module.exports = DelegatedPlugin;
