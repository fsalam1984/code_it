/**
 * @fileoverview Prevent missing React when using JSX
 * @author Glen Mailer
 */
<<<<<<< HEAD

=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
'use strict';

const variableUtil = require('../util/variable');
const pragmaUtil = require('../util/pragma');
const docsUrl = require('../util/docsUrl');
<<<<<<< HEAD
const report = require('../util/report');
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

// -----------------------------------------------------------------------------
// Rule Definition
// -----------------------------------------------------------------------------

<<<<<<< HEAD
const messages = {
  notInScope: '\'{{name}}\' must be in scope when using JSX',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow missing React when using JSX',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('react-in-jsx-scope'),
    },

    messages,

    schema: [],
  },

  create(context) {
    const pragma = pragmaUtil.getFromContext(context);

    function checkIfReactIsInScope(node) {
      if (variableUtil.getVariableFromContext(context, node, pragma)) {
        return;
      }
      report(context, messages.notInScope, 'notInScope', {
        node,
        data: {
          name: pragma,
        },
=======
module.exports = {
  meta: {
    docs: {
      description: 'Prevent missing React when using JSX',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('react-in-jsx-scope')
    },
    schema: []
  },

  create: function(context) {
    const pragma = pragmaUtil.getFromContext(context);
    const NOT_DEFINED_MESSAGE = '\'{{name}}\' must be in scope when using JSX';

    function checkIfReactIsInScope(node) {
      const variables = variableUtil.variablesInScope(context);
      if (variableUtil.findVariable(variables, pragma)) {
        return;
      }
      context.report({
        node: node,
        message: NOT_DEFINED_MESSAGE,
        data: {
          name: pragma
        }
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
      });
    }

    return {
      JSXOpeningElement: checkIfReactIsInScope,
<<<<<<< HEAD
      JSXOpeningFragment: checkIfReactIsInScope,
    };
  },
=======
      JSXOpeningFragment: checkIfReactIsInScope
    };
  }
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
};
