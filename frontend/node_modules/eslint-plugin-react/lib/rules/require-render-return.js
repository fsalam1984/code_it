/**
 * @fileoverview Enforce ES5 or ES6 class for returning value in render function.
 * @author Mark Orel
 */
<<<<<<< HEAD

'use strict';

const values = require('object.values');

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const componentUtil = require('../util/componentUtil');
const docsUrl = require('../util/docsUrl');
const report = require('../util/report');
const getAncestors = require('../util/eslint').getAncestors;
=======
'use strict';

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
const messages = {
  noRenderReturn: 'Your render method should have a return statement',
};

/** @type {import('eslint').Rule.RuleModule} */
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
module.exports = {
  meta: {
    docs: {
      description: 'Enforce ES5 or ES6 class for returning value in render function',
      category: 'Possible Errors',
      recommended: true,
<<<<<<< HEAD
      url: docsUrl('require-render-return'),
    },

    messages,

    schema: [],
  },

  create: Components.detect((context, components) => {
=======
      url: docsUrl('require-render-return')
    },
    schema: [{}]
  },

  create: Components.detect((context, components, utils) => {
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
    /**
     * Mark a return statement as present
     * @param {ASTNode} node The AST node being checked.
     */
    function markReturnStatementPresent(node) {
      components.set(node, {
<<<<<<< HEAD
        hasReturnStatement: true,
=======
        hasReturnStatement: true
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
      });
    }

    /**
<<<<<<< HEAD
     * Find render method in a given AST node
     * @param {ASTNode} node The component to find render method.
     * @returns {ASTNode} Method node if found, undefined if not.
     */
    function findRenderMethod(node) {
      const properties = astUtil.getComponentProperties(node);
      return properties
        .filter((property) => astUtil.getPropertyName(property) === 'render' && property.value)
        .find((property) => astUtil.isFunctionLikeExpression(property.value));
    }

    return {
      ReturnStatement(node) {
        const ancestors = getAncestors(context, node).reverse();
        let depth = 0;
        ancestors.forEach((ancestor) => {
          if (/Function(Expression|Declaration)$/.test(ancestor.type)) {
            depth += 1;
          }
          if (
            /(MethodDefinition|Property|ClassProperty|PropertyDefinition)$/.test(ancestor.type)
            && astUtil.getPropertyName(ancestor) === 'render'
            && depth <= 1
          ) {
            markReturnStatementPresent(node);
          }
        });
      },

      ArrowFunctionExpression(node) {
=======
     * Check if a given AST node has a render method
     * @param {ASTNode} node The AST node being checked.
     * @returns {Boolean} True if there is a render method, false if not
     */
    function hasRenderMethod(node) {
      const properties = astUtil.getComponentProperties(node);
      for (let i = 0, j = properties.length; i < j; i++) {
        if (astUtil.getPropertyName(properties[i]) !== 'render' || !properties[i].value) {
          continue;
        }
        return astUtil.isFunctionLikeExpression(properties[i].value);
      }
      return false;
    }

    return {
      ReturnStatement: function(node) {
        const ancestors = context.getAncestors(node).reverse();
        let depth = 0;
        for (let i = 0, j = ancestors.length; i < j; i++) {
          if (/Function(Expression|Declaration)$/.test(ancestors[i].type)) {
            depth++;
          }
          if (
            !/(MethodDefinition|(Class)?Property)$/.test(ancestors[i].type) ||
            astUtil.getPropertyName(ancestors[i]) !== 'render' ||
            depth > 1
          ) {
            continue;
          }
          markReturnStatementPresent(node);
        }
      },

      ArrowFunctionExpression: function(node) {
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        if (node.expression === false || astUtil.getPropertyName(node.parent) !== 'render') {
          return;
        }
        markReturnStatementPresent(node);
      },

<<<<<<< HEAD
      'Program:exit'() {
        values(components.list())
          .filter((component) => (
            findRenderMethod(component.node)
            && !component.hasReturnStatement
            && (
              componentUtil.isES5Component(component.node, context)
              || componentUtil.isES6Component(component.node, context)
            )
          ))
          .forEach((component) => {
            report(context, messages.noRenderReturn, 'noRenderReturn', {
              node: findRenderMethod(component.node),
            });
          });
      },
    };
  }),
=======
      'Program:exit': function() {
        const list = components.list();
        Object.keys(list).forEach(component => {
          if (
            !hasRenderMethod(list[component].node) ||
            list[component].hasReturnStatement ||
            (!utils.isES5Component(list[component].node) && !utils.isES6Component(list[component].node))
          ) {
            return;
          }
          context.report({
            node: list[component].node,
            message: 'Your render method should have return statement'
          });
        });
      }
    };
  })
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
};
