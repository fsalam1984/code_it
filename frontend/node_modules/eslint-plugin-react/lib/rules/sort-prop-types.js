/**
 * @fileoverview Enforce propTypes declarations alphabetical sorting
 */
<<<<<<< HEAD

=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
'use strict';

const variableUtil = require('../util/variable');
const propsUtil = require('../util/props');
const docsUrl = require('../util/docsUrl');
const propWrapperUtil = require('../util/propWrapper');
<<<<<<< HEAD
const propTypesSortUtil = require('../util/propTypesSort');
const report = require('../util/report');
const eslintUtil = require('../util/eslint');

const getSourceCode = eslintUtil.getSourceCode;
const getText = eslintUtil.getText;
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
const messages = {
  requiredPropsFirst: 'Required prop types must be listed before all other prop types',
  callbackPropsLast: 'Callback prop types must be listed after all other prop types',
  propsNotSorted: 'Prop types declarations should be sorted alphabetically',
};

function getKey(context, node) {
  if (node.type === 'ObjectTypeProperty') {
    return getSourceCode(context).getFirstToken(node).value;
  }
  if (node.key && node.key.value) {
    return node.key.value;
  }
  return getText(context, node.key || node.argument);
}

function getValueName(node) {
  return node.type === 'Property' && node.value.property && node.value.property.name;
}

function isCallbackPropName(propName) {
  return /^on[A-Z]/.test(propName);
}

function isRequiredProp(node) {
  return getValueName(node) === 'isRequired';
}

function isShapeProp(node) {
  return Boolean(
    node && node.callee && node.callee.property && node.callee.property.name === 'shape'
  );
}

function toLowerCase(item) {
  return String(item).toLowerCase();
}

/** @type {import('eslint').Rule.RuleModule} */
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
module.exports = {
  meta: {
    docs: {
      description: 'Enforce propTypes declarations alphabetical sorting',
      category: 'Stylistic Issues',
      recommended: false,
<<<<<<< HEAD
      url: docsUrl('sort-prop-types'),
    },
    fixable: 'code',

    messages,
=======
      url: docsUrl('sort-prop-types')
    },

    fixable: 'code',
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

    schema: [{
      type: 'object',
      properties: {
        requiredFirst: {
<<<<<<< HEAD
          type: 'boolean',
        },
        callbacksLast: {
          type: 'boolean',
        },
        ignoreCase: {
          type: 'boolean',
        },
        // Whether alphabetical sorting should be enforced
        noSortAlphabetically: {
          type: 'boolean',
        },
        sortShapeProp: {
          type: 'boolean',
        },
        checkTypes: {
          type: 'boolean',
        },
      },
      additionalProperties: false,
    }],
  },

  create(context) {
=======
          type: 'boolean'
        },
        callbacksLast: {
          type: 'boolean'
        },
        ignoreCase: {
          type: 'boolean'
        },
        // Whether alphabetical sorting should be enforced
        noSortAlphabetically: {
          type: 'boolean'
        },
        sortShapeProp: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },

  create: function(context) {
    const sourceCode = context.getSourceCode();
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
    const configuration = context.options[0] || {};
    const requiredFirst = configuration.requiredFirst || false;
    const callbacksLast = configuration.callbacksLast || false;
    const ignoreCase = configuration.ignoreCase || false;
    const noSortAlphabetically = configuration.noSortAlphabetically || false;
    const sortShapeProp = configuration.sortShapeProp || false;
<<<<<<< HEAD
    const checkTypes = configuration.checkTypes || false;

    const typeAnnotations = new Map();
=======

    function getKey(node) {
      if (node.key && node.key.value) {
        return node.key.value;
      }
      return sourceCode.getText(node.key || node.argument);
    }

    function getValueName(node) {
      return node.type === 'Property' && node.value.property && node.value.property.name;
    }

    function isCallbackPropName(propName) {
      return /^on[A-Z]/.test(propName);
    }

    function isRequiredProp(node) {
      return getValueName(node) === 'isRequired';
    }

    function isShapeProp(node) {
      return Boolean(
        node && node.callee && node.callee.property && node.callee.property.name === 'shape'
      );
    }

    function getShapeProperties (node) {
      return node.arguments && node.arguments[0] && node.arguments[0].properties;
    }

    function sorter(a, b) {
      let aKey = getKey(a);
      let bKey = getKey(b);
      if (requiredFirst) {
        if (isRequiredProp(a) && !isRequiredProp(b)) {
          return -1;
        }
        if (!isRequiredProp(a) && isRequiredProp(b)) {
          return 1;
        }
      }

      if (callbacksLast) {
        if (isCallbackPropName(aKey) && !isCallbackPropName(bKey)) {
          return 1;
        }
        if (!isCallbackPropName(aKey) && isCallbackPropName(bKey)) {
          return -1;
        }
      }

      if (ignoreCase) {
        aKey = aKey.toLowerCase();
        bKey = bKey.toLowerCase();
      }

      if (aKey < bKey) {
        return -1;
      }
      if (aKey > bKey) {
        return 1;
      }
      return 0;
    }

>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

    /**
     * Checks if propTypes declarations are sorted
     * @param {Array} declarations The array of AST nodes being checked.
     * @returns {void}
     */
    function checkSorted(declarations) {
      // Declarations will be `undefined` if the `shape` is not a literal. For
      // example, if it is a propType imported from another file.
      if (!declarations) {
        return;
      }

      function fix(fixer) {
<<<<<<< HEAD
        return propTypesSortUtil.fixPropTypesSort(
          context,
          fixer,
          declarations,
          ignoreCase,
          requiredFirst,
          callbacksLast,
          noSortAlphabetically,
          sortShapeProp,
          checkTypes
        );
      }

      const callbackPropsLastSeen = new WeakSet();
      const requiredPropsFirstSeen = new WeakSet();
      const propsNotSortedSeen = new WeakSet();
=======
        function sortInSource(allNodes, source) {
          const originalSource = source;
          const nodeGroups = allNodes.reduce((acc, curr) => {
            if (curr.type === 'ExperimentalSpreadProperty' || curr.type === 'SpreadElement') {
              acc.push([]);
            } else {
              acc[acc.length - 1].push(curr);
            }
            return acc;
          }, [[]]);

          nodeGroups.forEach(nodes => {
            const sortedAttributes = nodes.slice().sort(sorter);

            for (let i = nodes.length - 1; i >= 0; i--) {
              const sortedAttr = sortedAttributes[i];
              const attr = nodes[i];
              let sortedAttrText = sourceCode.getText(sortedAttr);
              if (sortShapeProp && isShapeProp(sortedAttr.value)) {
                const shape = getShapeProperties(sortedAttr.value);
                if (shape) {
                  const attrSource = sortInSource(
                    shape,
                    originalSource
                  );
                  sortedAttrText = attrSource.slice(sortedAttr.range[0], sortedAttr.range[1]);
                }
              }
              source = `${source.slice(0, attr.range[0])}${sortedAttrText}${source.slice(attr.range[1])}`;
            }
          });
          return source;
        }

        const source = sortInSource(declarations, context.getSourceCode().getText());

        const rangeStart = declarations[0].range[0];
        const rangeEnd = declarations[declarations.length - 1].range[1];
        return fixer.replaceTextRange([rangeStart, rangeEnd], source.slice(rangeStart, rangeEnd));
      }
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37

      declarations.reduce((prev, curr, idx, decls) => {
        if (curr.type === 'ExperimentalSpreadProperty' || curr.type === 'SpreadElement') {
          return decls[idx + 1];
        }

<<<<<<< HEAD
        let prevPropName = getKey(context, prev);
        let currentPropName = getKey(context, curr);
=======
        let prevPropName = getKey(prev);
        let currentPropName = getKey(curr);
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        const previousIsRequired = isRequiredProp(prev);
        const currentIsRequired = isRequiredProp(curr);
        const previousIsCallback = isCallbackPropName(prevPropName);
        const currentIsCallback = isCallbackPropName(currentPropName);

        if (ignoreCase) {
<<<<<<< HEAD
          prevPropName = toLowerCase(prevPropName);
          currentPropName = toLowerCase(currentPropName);
=======
          prevPropName = prevPropName.toLowerCase();
          currentPropName = currentPropName.toLowerCase();
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        }

        if (requiredFirst) {
          if (previousIsRequired && !currentIsRequired) {
            // Transition between required and non-required. Don't compare for alphabetical.
            return curr;
          }
          if (!previousIsRequired && currentIsRequired) {
            // Encountered a non-required prop after a required prop
<<<<<<< HEAD
            if (!requiredPropsFirstSeen.has(curr)) {
              requiredPropsFirstSeen.add(curr);
              report(context, messages.requiredPropsFirst, 'requiredPropsFirst', {
                node: curr,
                fix,
              });
            }
=======
            context.report({
              node: curr,
              message: 'Required prop types must be listed before all other prop types',
              fix
            });
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
            return curr;
          }
        }

        if (callbacksLast) {
          if (!previousIsCallback && currentIsCallback) {
            // Entering the callback prop section
            return curr;
          }
          if (previousIsCallback && !currentIsCallback) {
            // Encountered a non-callback prop after a callback prop
<<<<<<< HEAD
            if (!callbackPropsLastSeen.has(prev)) {
              callbackPropsLastSeen.add(prev);
              report(context, messages.callbackPropsLast, 'callbackPropsLast', {
                node: prev,
                fix,
              });
            }
=======
            context.report({
              node: prev,
              message: 'Callback prop types must be listed after all other prop types',
              fix
            });
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
            return prev;
          }
        }

        if (!noSortAlphabetically && currentPropName < prevPropName) {
<<<<<<< HEAD
          if (!propsNotSortedSeen.has(curr)) {
            propsNotSortedSeen.add(curr);
            report(context, messages.propsNotSorted, 'propsNotSorted', {
              node: curr,
              fix,
            });
          }
=======
          context.report({
            node: curr,
            message: 'Prop types declarations should be sorted alphabetically',
            fix
          });
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
          return prev;
        }

        return curr;
      }, declarations[0]);
    }

    function checkNode(node) {
      switch (node && node.type) {
        case 'ObjectExpression':
          checkSorted(node.properties);
          break;
<<<<<<< HEAD
        case 'Identifier': {
          const propTypesObject = variableUtil.findVariableByName(context, node, node.name);
=======
        case 'Identifier':
          const propTypesObject = variableUtil.findVariableByName(context, node.name);
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
          if (propTypesObject && propTypesObject.properties) {
            checkSorted(propTypesObject.properties);
          }
          break;
<<<<<<< HEAD
        }
        case 'CallExpression': {
=======
        case 'CallExpression':
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
          const innerNode = node.arguments && node.arguments[0];
          if (propWrapperUtil.isPropWrapperFunction(context, node.callee.name) && innerNode) {
            checkNode(innerNode);
          }
          break;
<<<<<<< HEAD
        }
=======
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        default:
          break;
      }
    }

<<<<<<< HEAD
    function handleFunctionComponent(node) {
      const firstArg = node.params
        && node.params.length > 0
        && node.params[0].typeAnnotation
        && node.params[0].typeAnnotation.typeAnnotation;
      if (firstArg && firstArg.type === 'TSTypeReference') {
        const propType = typeAnnotations.get(firstArg.typeName.name)
          && typeAnnotations.get(firstArg.typeName.name)[0];
        if (propType && propType.members) {
          checkSorted(propType.members);
        }
      } else if (firstArg && firstArg.type === 'TSTypeLiteral') {
        if (firstArg.members) {
          checkSorted(firstArg.members);
        }
      } else if (firstArg && firstArg.type === 'GenericTypeAnnotation') {
        const propType = typeAnnotations.get(firstArg.id.name)
          && typeAnnotations.get(firstArg.id.name)[0];
        if (propType && propType.properties) {
          checkSorted(propType.properties);
        }
      } else if (firstArg && firstArg.type === 'ObjectTypeAnnotation') {
        if (firstArg.properties) {
          checkSorted(firstArg.properties);
        }
      }
    }

    return Object.assign({
      CallExpression(node) {
        if (!sortShapeProp || !isShapeProp(node) || !(node.arguments && node.arguments[0])) {
          return;
        }

        const firstArg = node.arguments[0];
        if (firstArg.properties) {
          checkSorted(firstArg.properties);
        } else if (firstArg.type === 'Identifier') {
          const variable = variableUtil.findVariableByName(context, node, firstArg.name);
          if (variable && variable.properties) {
            checkSorted(variable.properties);
          }
        }
      },

      'ClassProperty, PropertyDefinition'(node) {
=======
    return {
      CallExpression: function(node) {
        if (!sortShapeProp || !isShapeProp(node) || !(node.arguments && node.arguments[0])) {
          return;
        }
        checkSorted(node.arguments[0].properties);
      },

      ClassProperty: function(node) {
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        if (!propsUtil.isPropTypesDeclaration(node)) {
          return;
        }
        checkNode(node.value);
      },

<<<<<<< HEAD
      MemberExpression(node) {
=======
      MemberExpression: function(node) {
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
        if (!propsUtil.isPropTypesDeclaration(node)) {
          return;
        }

        checkNode(node.parent.right);
      },

<<<<<<< HEAD
      ObjectExpression(node) {
        node.properties.forEach((property) => {
=======
      ObjectExpression: function(node) {
        node.properties.forEach(property => {
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
          if (!property.key) {
            return;
          }

          if (!propsUtil.isPropTypesDeclaration(property)) {
            return;
          }
          if (property.value.type === 'ObjectExpression') {
            checkSorted(property.value.properties);
          }
        });
<<<<<<< HEAD
      },
    }, checkTypes ? {
      TSTypeLiteral(node) {
        if (node && node.parent.id) {
          const currentNode = [].concat(
            typeAnnotations.get(node.parent.id.name) || [],
            node
          );
          typeAnnotations.set(node.parent.id.name, currentNode);
        }
      },

      TypeAlias(node) {
        if (node.right.type === 'ObjectTypeAnnotation') {
          const currentNode = [].concat(
            typeAnnotations.get(node.id.name) || [],
            node.right
          );
          typeAnnotations.set(node.id.name, currentNode);
        }
      },

      TSTypeAliasDeclaration(node) {
        if (node.typeAnnotation.type === 'TSTypeLiteral' || node.typeAnnotation.type === 'ObjectTypeAnnotation') {
          const currentNode = [].concat(
            typeAnnotations.get(node.id.name) || [],
            node.typeAnnotation
          );
          typeAnnotations.set(node.id.name, currentNode);
        }
      },
      FunctionDeclaration: handleFunctionComponent,
      ArrowFunctionExpression: handleFunctionComponent,
    } : null);
  },
=======
      }

    };
  }
>>>>>>> 491790fa3284842aea531bfa9d2fd819794b4f37
};
